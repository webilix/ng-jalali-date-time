{"ast":null,"code":"import { JalaliDateTime } from 'jalali-date-time';\nimport { JalaliLocale } from './shared/jalali.locale';\nimport * as i0 from \"@angular/core\";\nexport let NgJalaliDateTimeService = /*#__PURE__*/(() => {\n  class NgJalaliDateTimeService {\n    constructor() {\n      this.jalali = JalaliDateTime({\n        timezone: 'Asia/Tehran',\n        locale: 'en',\n        dateFormat: 'Y-M-D',\n        timeFormat: 'H:I:S',\n        titleFormat: 'W، d N Y',\n        fullTextFormat: 'W، d N Y H:I:S'\n      });\n      this.jalaliLocale = new JalaliLocale();\n    }\n\n    checkDate(date) {\n      if (typeof date !== 'string' || date.length !== 10) return '';\n      if (!date.match(/([0-9]{4}-[0-9]{2}-[0-9]{2})/)) return '';\n      const [year, month, day] = date.split('-');\n      if (Number(year) < 1000 || Number(year) > 4000) return '';\n      if (Number(month) < 1 || Number(month) > 12) return '';\n      if (Number(day) < 1 || Number(day) > 31) return '';\n      return date;\n    }\n\n    checkTime(time) {\n      if (typeof time !== 'string' || time.length !== 8) return '';\n      if (!time.match(/([0-9]{2}:[0-9]{2}:[0-9]{2})/)) return '';\n      const [hour, minute, second] = time.split('-');\n      if (Number(hour) < 0 || Number(hour) > 23) return '';\n      if (Number(minute) < 0 || Number(minute) > 59) return '';\n      if (Number(second) < 0 || Number(second) > 59) return '';\n      return time;\n    }\n\n    checkMonth(date) {\n      if (typeof date !== 'string' || date.length !== 7) return '';\n      if (!date.match(/([0-9]{4}-[0-9]{2})/)) return '';\n      const [year, month] = date.split('-');\n      if (Number(year) < 1000 || Number(year) > 4000) return '';\n      if (Number(month) < 1 || Number(month) > 12) return '';\n      return date;\n    }\n\n    checkAppearance(appearance) {\n      return ['legacy', 'standard', 'fill', 'outline'].includes(appearance) ? appearance : 'legacy';\n    }\n\n    setFontCSS(css, font) {\n      return Object.assign(Object.assign({}, css), {\n        fontFamily: font\n      });\n    }\n\n    checkCSS(css) {\n      if (!css) css = {};\n      css.font = css.font ? css.font : \"Roboto, 'Helvetica Neue', sans-serif\";\n      css.field = css.field ? css.field : {};\n      css.input = this.setFontCSS(css.input ? css.input : {}, css.font);\n      css.reset = css.reset ? css.reset : {};\n      css.box = css.box ? css.box : {};\n      css.arrow = css.arrow ? css.arrow : {};\n      css.header = this.setFontCSS(css.header ? css.header : {}, css.font);\n      css.item = this.setFontCSS(css.item ? css.item : {}, css.font);\n      css.selected = css.selected ? css.selected : {};\n      css.selected = Object.assign(Object.assign({}, css.item), css.selected);\n      css.current = css.current ? css.current : {};\n      css.current = Object.assign(Object.assign({}, css.item), css.current);\n      if (!css.date) css.date = {};\n      css.date.name = this.setFontCSS(css.date.name ? css.date.name : {}, css.font);\n      css.date.time = this.setFontCSS(css.date.time ? css.date.time : {}, css.font);\n      if (!css.month) css.month = {};\n      if (!css.range) css.range = {};\n      css.range.tool = this.setFontCSS(css.range.tool ? css.range.tool : {}, css.font);\n      css.range.custom = css.range.custom ? css.range.custom : {};\n      css.range.custom = Object.assign(Object.assign({}, css.range.tool), css.range.custom);\n      css.range.confirm = css.range.confirm ? css.range.confirm : {};\n      css.range.confirm = Object.assign(Object.assign(Object.assign({}, css.range.tool), css.range.custom), css.range.confirm);\n      css.range.name = this.setFontCSS(css.range.name ? css.range.name : {}, css.font);\n      css.range.date = this.setFontCSS(css.range.date ? css.range.date : {}, css.font);\n      return css;\n    }\n\n    jalaliToGregorian(jalali, time) {\n      const gregorian = this.jalali.gregorian(jalali).date;\n      return new Date(gregorian + 'T' + (this.checkTime(time) ? time : '12:00:00'));\n    }\n\n    getCalendar(month) {\n      const now = this.jalaliToGregorian(month + '-01');\n      const title = this.jalali.toFullText(now, {\n        format: 'N Y'\n      });\n      let begin = now;\n\n      while (begin.getDay() !== 6) begin = new Date(begin.getTime() - 24 * 3600 * 1000);\n\n      const weeks = [];\n      let days = [];\n      let date = this.jalali.toDate(begin);\n\n      while (date.substr(0, 7) <= month || days.length % 7 !== 0) {\n        days.push({\n          date,\n          month: date.substr(0, 7),\n          day: Number(date.substr(8))\n        });\n\n        if (days.length === 7) {\n          weeks.push({\n            days\n          });\n          days = [];\n        }\n\n        begin = new Date(begin.getTime() + 24 * 3600 * 1000);\n        date = this.jalali.toDate(begin);\n      }\n\n      return {\n        month,\n        title,\n        weeks\n      };\n    }\n\n    getDayInMonth(month) {\n      const [Y, M] = month.split('-');\n      if (Number(M) < 7) return 31;\n      if (Number(M) < 12) return 30;\n      const date = this.jalaliToGregorian(month + '-30');\n      const check = this.jalali.toString(date, {\n        format: 'Y-M-D'\n      }).substr(0, 7);\n      return check === month ? 30 : 29;\n    }\n    /*\n     * DATETIME\n     */\n\n\n    getDateTimeValue(jalali, time) {\n      const gregorian = jalali ? this.jalali.gregorian(jalali).date : '';\n      const date = gregorian ? new Date(gregorian + 'T' + (time ? time : '12:00:00')) : null;\n      const timestamp = gregorian ? Math.floor(date.getTime() / 1000) : null;\n      time = time ? time : '00:00:00';\n      return {\n        jalali,\n        gregorian,\n        date,\n        time,\n        timestamp\n      };\n    }\n\n    getDateTimeTitle(value, time) {\n      if (!value.jalali) return '';\n      return time ? this.jalali.toFullText(value.date) : this.jalali.toTitle(value.date);\n    }\n    /*\n     * MONTH\n     */\n\n\n    getMonthValue(month) {\n      let days = 0;\n      const gregorian = {\n        first: '',\n        last: ''\n      };\n\n      if (month) {\n        days = this.getDayInMonth(month);\n        gregorian.first = this.jalali.gregorian(month + '-01').date;\n        gregorian.last = this.jalali.gregorian(month + '-' + days.toString()).date;\n      }\n\n      return {\n        month,\n        days,\n        gregorian\n      };\n    }\n\n    getMonthTitle(value) {\n      if (!value.month) return '';\n      const date = this.jalaliToGregorian(value.month + '-01');\n      return this.jalali.toTitle(date, {\n        format: 'N Y'\n      });\n    }\n    /*\n     * RANGE\n     */\n\n\n    getRangeValue(from, to) {\n      let days = 0;\n      let hours = 0;\n      let minutes = 0;\n      let seconds = 0;\n      const gregorian = {\n        from: '',\n        to: ''\n      };\n\n      if (from && to) {\n        gregorian.from = this.jalali.gregorian(from).date;\n        gregorian.to = this.jalali.gregorian(to).date;\n        const fTimestamp = Math.floor(new Date(gregorian.from + 'T12:00:00').getTime() / 1000);\n        const tTimestamp = Math.floor(new Date(gregorian.to + 'T12:00:00').getTime() / 1000);\n        days = Math.floor(Math.abs((tTimestamp - fTimestamp) / (24 * 3600))) + 1;\n        hours = days * 24;\n        minutes = hours * 60;\n        seconds = minutes * 60;\n      }\n\n      return {\n        range: from && to ? from + '|' + to : '',\n        from,\n        to,\n        days,\n        hours,\n        minutes,\n        seconds,\n        gregorian\n      };\n    }\n\n    getRangeTitle(value) {\n      if (!value.from || !value.to) return '';\n      const fDate = this.jalaliToGregorian(value.from);\n      const tDate = this.jalaliToGregorian(value.to);\n      const [fY, fM, fD] = value.from.split('-');\n      const [tY, tM, tD] = value.to.split('-');\n      let from = '';\n\n      if (fY === tY && fM === tM) {\n        from = this.jalali.toTitle(fDate, {\n          format: 'd'\n        });\n      } else if (fY === tY) {\n        from = this.jalali.toTitle(fDate, {\n          format: 'd N'\n        });\n      } else {\n        from = this.jalali.toTitle(fDate, {\n          format: 'd N Y'\n        });\n      }\n\n      return from + ' ' + this.jalaliLocale.rangeTo + ' ' + this.jalali.toTitle(tDate, {\n        format: 'd N Y'\n      });\n    }\n\n  }\n\n  NgJalaliDateTimeService.ɵfac = function NgJalaliDateTimeService_Factory(t) {\n    return new (t || NgJalaliDateTimeService)();\n  };\n\n  NgJalaliDateTimeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NgJalaliDateTimeService,\n    factory: NgJalaliDateTimeService.ɵfac\n  });\n  return NgJalaliDateTimeService;\n})();","map":null,"metadata":{},"sourceType":"module"}