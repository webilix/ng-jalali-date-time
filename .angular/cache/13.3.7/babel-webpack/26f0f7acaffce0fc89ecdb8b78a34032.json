{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.periodWeek = void 0;\n\nconst JDate = __importStar(require(\"../../script/date\"));\n\nconst JDT = __importStar(require(\"../../script/jdt\"));\n\nconst getFriday = (date, timezone) => {\n  date = JDate.getMoment(date, timezone).endOf('D').toDate();\n\n  while (JDate.getMoment(date, timezone).weekday() !== 5) {\n    date = JDate.getMoment(new Date(date.getTime() + 1), timezone).endOf('D').toDate();\n  }\n\n  return date;\n};\n\nconst getSaturday = (date, timezone) => {\n  date = JDate.getMoment(date, timezone).startOf('D').toDate();\n\n  while (JDate.getMoment(date, timezone).weekday() !== 6) {\n    date = JDate.getMoment(new Date(date.getTime() - 1), timezone).startOf('D').toDate();\n  }\n\n  return date;\n};\n\nconst periodWeek = (weeks, date, timezone) => {\n  date = date || new Date();\n  if (!JDate.checkDate(date)) throw new TypeError('Invalid Date');\n  if (!JDate.checkTimezone(timezone || '')) timezone = JDT.timezone();\n  if (isNaN(weeks) || weeks < 1) throw new TypeError('Weeks must be bigger than 0');\n  let to = getFriday(date, timezone);\n  const periods = [];\n\n  while (periods.length < weeks) {\n    const from = getSaturday(to, timezone);\n    periods.unshift({\n      from,\n      to\n    });\n    to = new Date(from.getTime() - 1);\n  }\n\n  return {\n    from: periods[0].from,\n    to: periods[periods.length - 1].to,\n    periods\n  };\n};\n\nexports.periodWeek = periodWeek; //# sourceMappingURL=week.js.map","map":null,"metadata":{},"sourceType":"script"}