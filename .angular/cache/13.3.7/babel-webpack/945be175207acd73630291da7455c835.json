{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.string = exports.format = exports.timezone = exports.check = exports.init = exports.type = void 0;\n\nconst JDate = __importStar(require(\"./date\"));\n\nlet _default = {};\nconst type = {\n  now: 'NOW',\n  date: 'DATE',\n  time: 'TIME',\n  title: 'TITLE',\n  fullText: 'FULL-TEXT'\n};\nexports.type = type;\n\nconst init = options => {\n  if (options === undefined) options = {};\n  if (options.timezone === undefined || !JDate.checkTimezone(options.timezone)) options.timezone = 'Asia/Tehran';\n  if (options.locale === undefined || !JDate.checkLocale(options.locale)) options.locale = 'en';\n  if (options.fullTextFormat === undefined) options.fullTextFormat = 'W, D N Y H:I:S';\n  if (options.titleFormat === undefined) options.titleFormat = 'W, D N Y';\n  if (options.dateFormat === undefined) options.dateFormat = 'Y-M-D';\n  if (options.timeFormat === undefined) options.timeFormat = 'H:I:S';\n  _default = options;\n  return _default;\n};\n\nexports.init = init;\n\nconst check = (config, format) => {\n  if (config === undefined) config = {};\n  if (config.timezone === undefined) config.timezone = _default.timezone;\n  if (config.locale === undefined) config.locale = _default.locale;\n\n  if (config.format === undefined) {\n    switch (format) {\n      case type.now:\n        config.format = _default.dateFormat + ' ' + _default.timeFormat;\n        break;\n\n      case type.date:\n        config.format = _default.dateFormat;\n        break;\n\n      case type.time:\n        config.format = _default.timeFormat;\n        break;\n\n      case type.title:\n        config.format = _default.titleFormat;\n        break;\n\n      case type.fullText:\n        config.format = _default.fullTextFormat;\n        break;\n    }\n  }\n\n  return config;\n};\n\nexports.check = check;\n\nconst timezone = () => _default.timezone || 'Asia/Tehran';\n\nexports.timezone = timezone;\n\nconst format = (format, check) => {\n  const operators = ['W', 'N', 'Y', 'M', 'D', 'H', 'I', 'S'];\n  operators.forEach(operator => {\n    if (check.indexOf(operator) !== -1) return;\n    const regex = new RegExp(operator, 'ig');\n    format = format.replace(regex, '');\n  });\n  return format;\n};\n\nexports.format = format;\n\nconst string = (date, config, format) => {\n  if (!JDate.checkDate(date)) throw new TypeError('Invalid Date');\n  const value = JDate.getMoment(date, config.timezone);\n  const jalali = JDate.toJalali(JDate.toObject(value));\n  return JDate.toString(jalali, format, config.locale || 'en');\n};\n\nexports.string = string; //# sourceMappingURL=jdt.js.map","map":null,"metadata":{},"sourceType":"script"}